multi_log_wflow <-
workflow() %>%
add_model(multi_log_model) %>%
add_recipe(multi_rec)
multi_log_fit <- fit(multi_log_wflow, students_train)
multi_test_res <- predict(multi_log_fit,
new_data = students_test %>% select(-GPA),
type = "prob")
multi_test_res <- bind_cols(multi_test_res,
students_test %>% select(GPA),
predict(multi_log_fit,
new_data = students_test %>% select(-GPA)))
accuracy(multi_test_res, GPA, .pred_class)
mcc(multi_test_res, GPA, .pred_class)
multi_totals <-
count(multi_test_res, GPA, name = "totals") %>%
mutate(class_wts = totals / sum(totals))
multi_totals
multi_counts <-
multi_test_res %>%
group_by(GPA, .pred_class) %>%
count() %>%
ungroup()
# Compute the four sensitivities using 1-vs-all
gpa_one_versus_all <-
multi_counts %>%
filter(GPA == .pred_class) %>%
full_join(multi_totals, by = "GPA") %>%
mutate(sens = n / totals)
gpa_one_versus_all
# Three different estimates:
gpa_one_versus_all %>%
summarize(
macro = mean(sens),
macro_wts = weighted.mean(sens, class_wts),
micro = sum(n) / sum(totals)
)
sensitivity(multi_test_res, GPA, .pred_class, estimator = "macro")
sensitivity(multi_test_res, GPA, .pred_class, estimator = "macro_weighted")
sensitivity(multi_test_res, GPA, .pred_class, estimator = "micro")
roc_auc(multi_test_res, GPA, names(multi_test_res)[1:3])
roc_auc(multi_test_res, GPA, names(multi_test_res)[1:3], estimator = "macro_weighted")
multi_test_res %>%
mutate(Resample = c(rep("Fold01", 338),
rep("Fold02", 338),
rep("Fold03", 338),
rep("Fold04", 338),
rep("Fold05", 338),
rep("Fold06", 338),
rep("Fold07", 338),
rep("Fold08", 338),
rep("Fold09", 338),
rep("Fold10", 337))) %>%
group_by(Resample) %>%
accuracy(GPA, .pred_class)
# Four 1-vs-all ROC curves for each fold
multi_test_res %>%
mutate(Resample = c(rep("Fold01", 338),
rep("Fold02", 338),
rep("Fold03", 338),
rep("Fold04", 338),
rep("Fold05", 338),
rep("Fold06", 338),
rep("Fold07", 338),
rep("Fold08", 338),
rep("Fold09", 338),
rep("Fold10", 337))) %>%
group_by(Resample) %>%
roc_curve(GPA, names(multi_test_res)[1:3]) %>%
autoplot()
#Chapter 10 ----
#Resampling for Evaluating Performance
student_rf_model <-
rand_forest(trees = 1000) %>%
set_engine("ranger") %>%
set_mode("regression")
student_rf_wflow <-
workflow() %>%
add_formula(
OVERALL_GPA ~ ZIP + AGE_AT_TERM_START + PAID_AMT + SEX + TOTAL_DAY_BILL_HR) %>%
add_model(student_rf_model)
student_rf_fit <- student_rf_wflow %>% fit(data = students_train)
my_estimate_perf <- function(model, dat) {
# Capture the names of the `model` and `dat` objects
cl <- match.call()
obj_name <- as.character(cl$model)
data_name <- as.character(cl$dat)
data_name <- gsub("students_", "", data_name)
# Estimate these metrics:
reg_metrics <- metric_set(rmse, rsq)
model %>%
predict(dat) %>%
bind_cols(dat %>% select(OVERALL_GPA)) %>%
reg_metrics(OVERALL_GPA, .pred) %>%
select(-.estimator) %>%
mutate(object = obj_name, data = data_name)
}
my_estimate_perf(student_rf_fit, students_train)
my_estimate_perf(student_lm_fit, students_train)
my_estimate_perf(student_rf_fit, students_test)
set.seed(1001)
students_folds <- vfold_cv(students_train, v = 10)
students_folds
# For the first fold:
students_folds$splits[[1]] %>% analysis() %>% dim()
vfold_cv(students_train, v = 10, repeats = 5)
mc_cv(students_train, prop = 9/10, times = 20)
set.seed(1002)
student_val <- validation_split(students_train, prop = 3/4)
student_val
bootstraps(students_train, times = 5)
time_slices <-
tibble(x = 1:365) %>%
rolling_origin(initial = 6 * 30, assess = 30, skip = 29, cumulative = FALSE)
data_range <- function(x) {
summarize(x, first = min(x), last = max(x))
}
map_dfr(time_slices$splits, ~   analysis(.x) %>% data_range())
map_dfr(time_slices$splits, ~ assessment(.x) %>% data_range())
keep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)
set.seed(1003)
student_rf_res <-
student_rf_wflow %>%
fit_resamples(resamples = students_folds, control = keep_pred)
student_rf_res
collect_metrics(student_rf_res)
student_assess_res <- collect_predictions(student_rf_res)
student_assess_res
student_assess_res %>%
ggplot(aes(x = OVERALL_GPA, y = .pred)) +
geom_point(alpha = .15) +
geom_abline(color = "red") +
coord_obs_pred() +
ylab("Predicted")
student_under_predicted <-
student_assess_res %>%
mutate(residual = OVERALL_GPA - .pred) %>%
arrange(desc(residual)) %>%
slice(1:2)
student_under_predicted
students_train %>%
slice(student_under_predicted$.row) %>%
select(ZIP, SEX, AGE_AT_TERM_START, FOR_CREDIT_COURSES, OFF_CAMPUS_BILL_HRS, FULL_PART_IND,
PAID_AMT, TookSAT)
student_val_res <- student_rf_wflow %>% fit_resamples(resamples = student_val)
student_val_res
collect_metrics(student_val_res)
# The number of physical cores in the hardware:
parallel::detectCores(logical = FALSE)
# The number of possible independent processes that can
# be simultaneously used:
parallel::detectCores(logical = TRUE)
# All operating systems
library(doParallel)
# Create a cluster object and then register:
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
# Now run fit_resamples()`...
set.seed(1003)
studentrf_res <- rf_wflow %>% fit_resamples(resamples = students_folds, control = keep_pred)
stopCluster(cl)
# Now run fit_resamples()`...
set.seed(1003)
studentrf_res <- student_rf_wflow %>% fit_resamples(resamples = students_folds, control = keep_pred)
# Create a cluster object and then register:
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
# Now run fit_resamples()`...
set.seed(1003)
studentrf_res <- student_rf_wflow %>% fit_resamples(resamples = students_folds, control = keep_pred)
stopCluster(cl)
ames_rec <-
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type +
Latitude + Longitude, data = ames_train) %>%
step_other(Neighborhood, threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_") ) %>%
step_ns(Latitude, Longitude, deg_free = 20)
lm_wflow <-
workflow() %>%
add_recipe(ames_rec) %>%
add_model(linear_reg() %>% set_engine("lm"))
lm_fit <- lm_wflow %>% fit(data = ames_train)
# Select the recipe:
extract_recipe(lm_fit, estimated = TRUE)
student_rec <- recipe(OVERALL_GPA ~ ZIP + AGE_AT_TERM_START + PAID_AMT + SEX + TOTAL_DAY_BILL_HR,
data = students_train) %>%
step_mutate(ZIP = as.factor(str_sub(ZIP, end = 5))) %>%
step_log(AGE_AT_TERM_START, base = 10) %>%
step_log(PAID_AMT, base = 10, offset = 1) %>%
step_other(ZIP, threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact( ~ AGE_AT_TERM_START:starts_with("SEX_")) %>%
step_ns(TOTAL_DAY_BILL_HR, deg_free = 2)
student_lm_wflow <-
workflow() %>%
add_recipe(student_rec) %>%
add_model(linear_reg() %>% set_engine("lm"))
student_lm_fit <- student_lm_wflow %>% fit(data = students_train)
# Select the recipe:
extract_recipe(lm_fit, estimated = TRUE)
# Select the recipe:
extract_recipe(student_lm_fit, estimated = TRUE)
get_model <- function(x) {
extract_fit_parsnip(x) %>% tidy()
}
# Test it using:
get_model(lm_fit)
get_model <- function(x) {
extract_fit_parsnip(x) %>% tidy()
}
# Test it using:
get_model(student_lm_fit)
ctrl <- control_resamples(extract = get_model)
lm_res <- lm_wflow %>%  fit_resamples(resamples = ames_folds, control = ctrl)
# Create a cluster object and then register:
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
lm_res <- lm_wflow %>%  fit_resamples(resamples = ames_folds, control = ctrl)
lm_res
lm_res$.extracts[[1]]
# To get the results
lm_res$.extracts[[1]][[1]]
lm_res
lm_res$.extracts[[1]]
lm_res
lm_res$.extracts
lm_res$.extracts[[1]]
# To get the results
lm_res$.extracts[[1]][[1]]
ctrl <- control_resamples(extract = extract_fit_parsnip)
lm_res <- lm_wflow %>%  fit_resamples(resamples = ames_folds, control = ctrl)
lm_res
lm_res$.extracts[[1]]
# To get the results
lm_res$.extracts[[1]][[1]]
# To get the results
lm_res$.extracts[[1]][[1]] %>% tidy()
lm_res$.extracts[[1]] %>% tidy()
#tidy apparently doesn't work here.
ctrl <- control_resamples(extract = extract_fit_parsnip)
student_lm_res <- student_lm_wflow %>%  fit_resamples(resamples = students_folds, control = ctrl)
show_notes(.Last.tune.result)
library(stringr)
student_lm_res <- student_lm_wflow %>%  fit_resamples(resamples = students_folds, control = ctrl)
show_notes(.Last.tune.result)
??str_sub
student_rec <- recipe(OVERALL_GPA ~ ZIP + AGE_AT_TERM_START + PAID_AMT + SEX + TOTAL_DAY_BILL_HR,
data = students_train) %>%
step_mutate(ZIP = as.factor(stringr::str_sub(ZIP, end = 5))) %>%
step_log(AGE_AT_TERM_START, base = 10) %>%
step_log(PAID_AMT, base = 10, offset = 1) %>%
step_other(ZIP, threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact( ~ AGE_AT_TERM_START:starts_with("SEX_")) %>%
step_ns(TOTAL_DAY_BILL_HR, deg_free = 2)
student_lm_wflow <-
workflow() %>%
add_recipe(student_rec) %>%
add_model(linear_reg() %>% set_engine("lm"))
student_lm_res <- student_lm_wflow %>%  fit_resamples(resamples = students_folds, control = ctrl)
student_lm_res
lm_res$.extracts[[1]]
# To get the results
lm_res$.extracts[[1]][[1]]
#tidy apparently doesn't work here.
ctrl <- control_resamples(extract = get_model)
student_lm_res <- student_lm_wflow %>%  fit_resamples(resamples = students_folds, control = ctrl)
student_lm_res
lm_res$.extracts[[1]]
# To get the results
lm_res$.extracts[[1]][[1]]
get_model <- function(x) {
extract_fit_parsnip(x) %>% tidy()
}
# Test it using:
get_model(student_lm_fit)
#tidy apparently doesn't work here.
ctrl <- control_resamples(extract = get_model)
student_lm_res <- student_lm_wflow %>%  fit_resamples(resamples = students_folds, control = ctrl)
student_lm_res
lm_res$.extracts[[1]]
# To get the results
lm_res$.extracts[[1]][[1]]
student_lm_res$.extracts[[1]]
#tidy apparently doesn't work here.
ctrl <- control_resamples(extract = extract_fit_parsnip)
student_lm_res <- student_lm_wflow %>%  fit_resamples(resamples = students_folds, control = ctrl)
student_lm_res
student_lm_res$.extracts[[1]]
# To get the results
student_lm_res$.extracts[[1]][[1]]
all_coef <- map_dfr(lm_res$.extracts, ~ .x[[1]][[1]])
lm_res <- lm_wflow %>%  fit_resamples(resamples = ames_folds, control = ctrl)
# lm_res
#
# lm_res$.extracts[[1]]
# # To get the results
# lm_res$.extracts[[1]][[1]]
#
# all_coef <- map_dfr(lm_res$.extracts, ~ .x[[1]][[1]])
# # Show the replicates for a single predictor:
# filter(all_coef, term == "Year_Built")
#
library(tidyverse)
library(tidymodels)
con <- DBI::dbConnect(odbc::odbc(), "DMT1", timeout = 10, UID = "SPOESE",
PWD = rstudioapi::askForSecret("password"))
students_backup <- tbl(con, "MSFSTDN") %>%
filter(MSFSTDN_TERM_CODE > 201800,
MSFSTDN_TERM_CODE < 202124,
str_sub(MSFSTDN_TERM_CODE, start = -2) == "20",
str_sub(MSFSTDN_OIRA_STUDENT_TYPE, end = 1) == "N",
MSFSTDN_FOR_CREDIT_COURSES > 0,
MSFSTDN_TOTAL_BILL_HR > 0) %>%
select(MSFSTDN_PIDM, MSFSTDN_TERM_CODE, MSFSTDN_ZIP,
MSFSTDN_SEX, MSFSTDN_OVERALL_GPA, MSFSTDN_AGE_AT_TERM_START,
MSFSTDN_FOR_CREDIT_COURSES, MSFSTDN_TOTAL_DAY_BILL_HR,
MSFSTDN_TOTAL_EVE_BILL_HR, MSFSTDN_ROCKVILLE_BILL_HR,
MSFSTDN_GERMANTOWN_BILL_HR, MSFSTDN_TAK_PARK_BILL_HR,
MSFSTDN_OFF_CAMPUS_BILL_HRS, MSFSTDN_FULL_PART_IND) %>%
collect() %>%
rename_with(~str_remove(., "MSFSTDN_"))
retained_backup <- tbl(con, "MSFSTDN") %>%
filter(MSFSTDN_TERM_CODE > 201800,
MSFSTDN_TERM_CODE < 202224,
str_sub(MSFSTDN_TERM_CODE, start = -2) == "20",
MSFSTDN_FOR_CREDIT_COURSES > 0,
MSFSTDN_TOTAL_BILL_HR > 0) %>%
select(MSFSTDN_PIDM, MSFSTDN_TERM_CODE) %>%
collect() %>%
rename_with(~str_remove(., "MSFSTDN_")) %>%
rowwise() %>%
mutate(to_check = paste(PIDM, TERM_CODE, sep = ","))
finaid_backup <- tbl(con, "MSFFAIS") %>%
filter(MSFFAIS_COLLEC_YR_S5 >= 2018) %>%
select(MSFFAIS_PIDM, MSFFAIS_TERM_CODE_FALL, MSFFAIS_PAID_AMT) %>%
collect() %>%
group_by(MSFFAIS_PIDM, MSFFAIS_TERM_CODE_FALL) %>%
summarize(MSFFAIS_PAID_AMT = sum(MSFFAIS_PAID_AMT)) %>%
rename_with(~str_remove(., "MSFFAIS_"))
scores_backup <- tbl(con, "SORTEST") %>%
filter(SORTEST_TESC_CODE %in% c("S01", "S02", "S03", "S04",
"S05", "S06", "S07", "S08",
"S09", "S11", "S12", "S13",
"S14", "S15")) %>%
select(SORTEST_PIDM, SORTEST_TESC_CODE, SORTEST_TEST_DATE, SORTEST_TEST_SCORE) %>%
collect() %>%
rename_with(~str_remove(., "SORTEST_"))
DBI::dbDisconnect(con)
scores <- scores_backup %>%
select(PIDM) %>%
distinct() %>%
mutate(TookSAT = 1)
students <- students_backup %>%
filter(SEX %in% c("M","F")) %>%
left_join(finaid_backup, by = c("PIDM", "TERM_CODE" = "TERM_CODE_FALL")) %>%
left_join(scores) %>%
replace_na(list(PAID_AMT = 0, TookSAT = 0)) %>%
mutate(Retained = factor(paste(PIDM,as.character(as.integer(TERM_CODE)+100),
sep = ",") %in% retained_backup$to_check),
GPA = factor(
case_when(
OVERALL_GPA > 3.5 ~ "3.51-4.00",
OVERALL_GPA > 2 ~ "2.01-3.50",
TRUE ~ "0.00-2.00"
)))
set.seed(502)
students_split <- initial_split(students, prop = 0.80, strata = OVERALL_GPA)
students_train <- training(students_split)
students_test  <-  testing(students_split)
student_rec <- recipe(OVERALL_GPA ~ ZIP + AGE_AT_TERM_START + PAID_AMT + SEX + TOTAL_DAY_BILL_HR,
data = students_train) %>%
step_mutate(ZIP = as.factor(str_sub(ZIP, end = 5))) %>%
step_log(AGE_AT_TERM_START, base = 10) %>%
step_log(PAID_AMT, base = 10, offset = 1) %>%
step_other(ZIP, threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact( ~ AGE_AT_TERM_START:starts_with("SEX_")) %>%
step_ns(TOTAL_DAY_BILL_HR, deg_free = 2)
student_lm_model <- linear_reg() %>% set_engine("lm")
student_lm_wflow <-
workflow() %>%
add_model(student_lm_model) %>%
add_recipe(student_rec)
student_lm_fit <- fit(student_lm_wflow, students_train)
student_rf_model <-
rand_forest(trees = 1000) %>%
set_engine("ranger") %>%
set_mode("regression")
student_rf_wflow <-
workflow() %>%
add_formula(
OVERALL_GPA ~ ZIP + AGE_AT_TERM_START + PAID_AMT + SEX + TOTAL_DAY_BILL_HR) %>%
add_model(student_rf_model)
set.seed(1001)
students_folds <- vfold_cv(students_train, v = 10)
keep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)
set.seed(1003)
student_rf_res <- student_rf_wflow %>% fit_resamples(resamples = students_folds, control = keep_pred)
library(DBI)
con <- dbConnect(odbc::odbc(), "DMT1", timeout = 10, UID = "SPOESE",
PWD = rstudioapi::askForSecret("password"))
#' The ggplot theme used by MC
#'
#' `theme_mc()` uses a theme based on `theme_fivethirtyeight()` from the
#' `ggthemes` package.
#' @examples
#'
#' @export
theme_mc <- function() {
theme_fivethirtyeight() +
theme(legend.position = "none",
panel.grid.major.y = element_blank())
}
mtcars
#' Use MC's colors for a fill aesthetic
#'
#' `scale_fill_mc()` uses the main colors for the College as a fill option
#' for a categorical data set.
#'
#' @examples
#' ggplot(data = mtcars, aes(x = cyl, color = cyl)) + geom_hist() + scale_fil_mc()
#' @export
scale_fill_mc <- function() {
scale_fill_manual(values = c("#51237f","9FA1A4","#666666","#000000",
"#FFFFFF","6E4D94","#FF5E3A","0E8AD9","28A689"))
}
ggplot(data = mtcars, aes(x = cyl, fill = cyl)) + geom_hist()
library(tidyverse)
ggplot(data = mtcars, aes(x = cyl, fill = cyl)) + geom_hist()
geom_histogram()
ggplot(data = mtcars, aes(x = cyl, fill = cyl)) + geom_histogram()
ggplot(data = mtcars, aes(x = cyl, fill = cyl)) + geom_histogram() + scale_fill_mc()
ggplot(data = mtcars, aes(x = cyl, color = cyl)) + geom_histogram() + scale_fill_mc()
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl)) + geom_point() + theme_mc()
library(ggthemes)
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl)) + geom_point() + theme_mc()
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl)) + geom_point() + theme_mc() + scale_fill_mc()
#' @export
scale_color_mc <- function() {
scale_color_manual(values = c("#51237f","9FA1A4","#666666","#000000",
"#FFFFFF","6E4D94","#FF5E3A","0E8AD9","28A689"))
}
ggplot(data = mtcars, aes(x = wt, y = mpg, color = cyl)) + geom_point() + theme_mc() + scale_color_mc()
ggplot(data = mtcars, aes(x = wt, y = mpg, color = factor(cyl))) + geom_point() + theme_mc() + scale_color_mc()
ggplot(data = mtcars, aes(x = cyl, fill = factor(cyl))) + geom_histogram() + scale_fill_mc()
df <- tibble(pidm = c(1:5, 1, 2, 5, 1, 4), term_code = c(rep(202120,5), rep(202220,3), rep(202320,2)))
df
retention(df, 202120, 202220)
#' details. Default is 1.
#' @param term_code_col The index for the column that contains term code details.
#' Default is 2.
#' @returns A data frame of all students enrolled in `first_semester` with a
#' new column of logicals added indicating whether the student was retained to
#' `second_semester`.
#' @examples
#' df <- tibble(pidm = c(1:5, 1, 2, 5, 1, 4), term_code = c(rep(202120,5), rep(202220,3), rep(202320,2)))
#' retention(df, 202120, 202220)
#' @export
retention <- function(data, first_semester, next_semester, pidm_col = 1, term_code_col = 2) {
first_students <- data[as.vector(data[,term_code_col] == first_semester),]
second_students <- data[as.vector(data[,term_code_col] == next_semester),]
first_students[,pidm_col] |>
mutate(Retained = pull(first_students,pidm_col) %in% pull(second_students,pidm_col))
}
retention(df, 202120, 202220)
retention(df, 202120, 202320)
retention(df, 202220, 202320)
setwd("~/R/mcirp")
devtools::document()
?theme_mc
?retention
devtools::install()
library(mcirp)
#' details. Default is 1.
#' @param term_code_col The index for the column that contains term code details.
#' Default is 2.
#' @returns A data frame of all students enrolled in `first_semester` with a
#' new column of logicals added indicating whether the student was retained to
#' `second_semester`.
#' @examples
#' df <- tibble(pidm = c(1:5, 1, 2, 5, 1, 4), term_code = c(rep(202120,5), rep(202220,3), rep(202320,2)))
#' retention(df, 202120, 202220)
#' @export
retention <- function(data, first_semester, next_semester, pidm_col = 1, term_code_col = 2) {
first_students <- data[as.vector(data[,term_code_col] == first_semester),]
second_students <- data[as.vector(data[,term_code_col] == next_semester),]
first_students[,pidm_col] |>
mutate(Retained = pull(first_students,pidm_col) %in% pull(second_students,pidm_col))
}
library(tidyverse)
library(DBI)
con <- dbConnect(odbc::odbc(), "DMT1", timeout = 10, UID = "SPOESE",
PWD = rstudioapi::askForSecret("password"))
test <- tbl(con, "MSFSTDN_ARCHIVE") %>%
filter(MSFSTDN_TERM_CODE > 201920) %>%
select(MSFSTDN_PIDM, MSFSTDN_TERM_CODE, MSFSTDN_OIRA_STUDENT_TYPE)
test
test %>% collect() -> test
test
test %>% retention(202020, 202030, 1, 2)
test
test[as.vector(test[,2] == 202020)]
test[as.vector(test[,2] == 202020),]
test[as.vector(test[,2] == 202020),] -> first
test[as.vector(test[,2] == 202030),] -> second
first[,1] %>% mutate(Retained = pull(first, 1) %in% pull(second, 1))
first[,1]
first[] %>% mutate(Retained = pull(first, 1) %in% pull(second, 1))
devtools::install()
devtools::install()
